// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: schedule.proto

package schedule

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ScheduleClient is the client API for Schedule service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ScheduleClient interface {
	SetSchedule(ctx context.Context, in *SetScheduleRequest, opts ...grpc.CallOption) (*SetScheduleResponse, error)
	GetWeekScheduleByClass(ctx context.Context, in *GetWeekScheduleByClassRequest, opts ...grpc.CallOption) (*GetWeekScheduleByClassResponse, error)
	SetHomework(ctx context.Context, in *SetHomeworkRequest, opts ...grpc.CallOption) (*SetHomeworkResponse, error)
	SetWeeklySchedule(ctx context.Context, opts ...grpc.CallOption) (Schedule_SetWeeklyScheduleClient, error)
}

type scheduleClient struct {
	cc grpc.ClientConnInterface
}

func NewScheduleClient(cc grpc.ClientConnInterface) ScheduleClient {
	return &scheduleClient{cc}
}

func (c *scheduleClient) SetSchedule(ctx context.Context, in *SetScheduleRequest, opts ...grpc.CallOption) (*SetScheduleResponse, error) {
	out := new(SetScheduleResponse)
	err := c.cc.Invoke(ctx, "/schedule.Schedule/SetSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleClient) GetWeekScheduleByClass(ctx context.Context, in *GetWeekScheduleByClassRequest, opts ...grpc.CallOption) (*GetWeekScheduleByClassResponse, error) {
	out := new(GetWeekScheduleByClassResponse)
	err := c.cc.Invoke(ctx, "/schedule.Schedule/GetWeekScheduleByClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleClient) SetHomework(ctx context.Context, in *SetHomeworkRequest, opts ...grpc.CallOption) (*SetHomeworkResponse, error) {
	out := new(SetHomeworkResponse)
	err := c.cc.Invoke(ctx, "/schedule.Schedule/SetHomework", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduleClient) SetWeeklySchedule(ctx context.Context, opts ...grpc.CallOption) (Schedule_SetWeeklyScheduleClient, error) {
	stream, err := c.cc.NewStream(ctx, &Schedule_ServiceDesc.Streams[0], "/schedule.Schedule/SetWeeklySchedule", opts...)
	if err != nil {
		return nil, err
	}
	x := &scheduleSetWeeklyScheduleClient{stream}
	return x, nil
}

type Schedule_SetWeeklyScheduleClient interface {
	Send(*SetWeeklyScheduleRequest) error
	CloseAndRecv() (*SetWeeklyScheduleResponse, error)
	grpc.ClientStream
}

type scheduleSetWeeklyScheduleClient struct {
	grpc.ClientStream
}

func (x *scheduleSetWeeklyScheduleClient) Send(m *SetWeeklyScheduleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *scheduleSetWeeklyScheduleClient) CloseAndRecv() (*SetWeeklyScheduleResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SetWeeklyScheduleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ScheduleServer is the server API for Schedule service.
// All implementations must embed UnimplementedScheduleServer
// for forward compatibility
type ScheduleServer interface {
	SetSchedule(context.Context, *SetScheduleRequest) (*SetScheduleResponse, error)
	GetWeekScheduleByClass(context.Context, *GetWeekScheduleByClassRequest) (*GetWeekScheduleByClassResponse, error)
	SetHomework(context.Context, *SetHomeworkRequest) (*SetHomeworkResponse, error)
	SetWeeklySchedule(Schedule_SetWeeklyScheduleServer) error
	mustEmbedUnimplementedScheduleServer()
}

// UnimplementedScheduleServer must be embedded to have forward compatible implementations.
type UnimplementedScheduleServer struct {
}

func (UnimplementedScheduleServer) SetSchedule(context.Context, *SetScheduleRequest) (*SetScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSchedule not implemented")
}
func (UnimplementedScheduleServer) GetWeekScheduleByClass(context.Context, *GetWeekScheduleByClassRequest) (*GetWeekScheduleByClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWeekScheduleByClass not implemented")
}
func (UnimplementedScheduleServer) SetHomework(context.Context, *SetHomeworkRequest) (*SetHomeworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHomework not implemented")
}
func (UnimplementedScheduleServer) SetWeeklySchedule(Schedule_SetWeeklyScheduleServer) error {
	return status.Errorf(codes.Unimplemented, "method SetWeeklySchedule not implemented")
}
func (UnimplementedScheduleServer) mustEmbedUnimplementedScheduleServer() {}

// UnsafeScheduleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScheduleServer will
// result in compilation errors.
type UnsafeScheduleServer interface {
	mustEmbedUnimplementedScheduleServer()
}

func RegisterScheduleServer(s grpc.ServiceRegistrar, srv ScheduleServer) {
	s.RegisterService(&Schedule_ServiceDesc, srv)
}

func _Schedule_SetSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServer).SetSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schedule.Schedule/SetSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServer).SetSchedule(ctx, req.(*SetScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schedule_GetWeekScheduleByClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWeekScheduleByClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServer).GetWeekScheduleByClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schedule.Schedule/GetWeekScheduleByClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServer).GetWeekScheduleByClass(ctx, req.(*GetWeekScheduleByClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schedule_SetHomework_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetHomeworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduleServer).SetHomework(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/schedule.Schedule/SetHomework",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduleServer).SetHomework(ctx, req.(*SetHomeworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Schedule_SetWeeklySchedule_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScheduleServer).SetWeeklySchedule(&scheduleSetWeeklyScheduleServer{stream})
}

type Schedule_SetWeeklyScheduleServer interface {
	SendAndClose(*SetWeeklyScheduleResponse) error
	Recv() (*SetWeeklyScheduleRequest, error)
	grpc.ServerStream
}

type scheduleSetWeeklyScheduleServer struct {
	grpc.ServerStream
}

func (x *scheduleSetWeeklyScheduleServer) SendAndClose(m *SetWeeklyScheduleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *scheduleSetWeeklyScheduleServer) Recv() (*SetWeeklyScheduleRequest, error) {
	m := new(SetWeeklyScheduleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Schedule_ServiceDesc is the grpc.ServiceDesc for Schedule service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Schedule_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schedule.Schedule",
	HandlerType: (*ScheduleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetSchedule",
			Handler:    _Schedule_SetSchedule_Handler,
		},
		{
			MethodName: "GetWeekScheduleByClass",
			Handler:    _Schedule_GetWeekScheduleByClass_Handler,
		},
		{
			MethodName: "SetHomework",
			Handler:    _Schedule_SetHomework_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetWeeklySchedule",
			Handler:       _Schedule_SetWeeklySchedule_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "schedule.proto",
}
