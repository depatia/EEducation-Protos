// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: grades.proto

package grades

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GradesClient is the client API for Grades service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GradesClient interface {
	GetLessonGrades(ctx context.Context, in *GetLessonGradesRequest, opts ...grpc.CallOption) (*GetLessonGradesResponse, error)
	GetAllLessonsGradesByStudentID(ctx context.Context, in *GetAllLessonsGradesByStudentIDRequest, opts ...grpc.CallOption) (*GetAllLessonsGradesByStudentIDResponse, error)
	SetGrade(ctx context.Context, in *SetGradeRequest, opts ...grpc.CallOption) (*SetGradeResponse, error)
}

type gradesClient struct {
	cc grpc.ClientConnInterface
}

func NewGradesClient(cc grpc.ClientConnInterface) GradesClient {
	return &gradesClient{cc}
}

func (c *gradesClient) GetLessonGrades(ctx context.Context, in *GetLessonGradesRequest, opts ...grpc.CallOption) (*GetLessonGradesResponse, error) {
	out := new(GetLessonGradesResponse)
	err := c.cc.Invoke(ctx, "/grades.Grades/GetLessonGrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradesClient) GetAllLessonsGradesByStudentID(ctx context.Context, in *GetAllLessonsGradesByStudentIDRequest, opts ...grpc.CallOption) (*GetAllLessonsGradesByStudentIDResponse, error) {
	out := new(GetAllLessonsGradesByStudentIDResponse)
	err := c.cc.Invoke(ctx, "/grades.Grades/GetAllLessonsGradesByStudentID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gradesClient) SetGrade(ctx context.Context, in *SetGradeRequest, opts ...grpc.CallOption) (*SetGradeResponse, error) {
	out := new(SetGradeResponse)
	err := c.cc.Invoke(ctx, "/grades.Grades/SetGrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GradesServer is the server API for Grades service.
// All implementations must embed UnimplementedGradesServer
// for forward compatibility
type GradesServer interface {
	GetLessonGrades(context.Context, *GetLessonGradesRequest) (*GetLessonGradesResponse, error)
	GetAllLessonsGradesByStudentID(context.Context, *GetAllLessonsGradesByStudentIDRequest) (*GetAllLessonsGradesByStudentIDResponse, error)
	SetGrade(context.Context, *SetGradeRequest) (*SetGradeResponse, error)
	mustEmbedUnimplementedGradesServer()
}

// UnimplementedGradesServer must be embedded to have forward compatible implementations.
type UnimplementedGradesServer struct {
}

func (UnimplementedGradesServer) GetLessonGrades(context.Context, *GetLessonGradesRequest) (*GetLessonGradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLessonGrades not implemented")
}
func (UnimplementedGradesServer) GetAllLessonsGradesByStudentID(context.Context, *GetAllLessonsGradesByStudentIDRequest) (*GetAllLessonsGradesByStudentIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLessonsGradesByStudentID not implemented")
}
func (UnimplementedGradesServer) SetGrade(context.Context, *SetGradeRequest) (*SetGradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGrade not implemented")
}
func (UnimplementedGradesServer) mustEmbedUnimplementedGradesServer() {}

// UnsafeGradesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GradesServer will
// result in compilation errors.
type UnsafeGradesServer interface {
	mustEmbedUnimplementedGradesServer()
}

func RegisterGradesServer(s grpc.ServiceRegistrar, srv GradesServer) {
	s.RegisterService(&Grades_ServiceDesc, srv)
}

func _Grades_GetLessonGrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLessonGradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradesServer).GetLessonGrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grades.Grades/GetLessonGrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradesServer).GetLessonGrades(ctx, req.(*GetLessonGradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grades_GetAllLessonsGradesByStudentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllLessonsGradesByStudentIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradesServer).GetAllLessonsGradesByStudentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grades.Grades/GetAllLessonsGradesByStudentID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradesServer).GetAllLessonsGradesByStudentID(ctx, req.(*GetAllLessonsGradesByStudentIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Grades_SetGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GradesServer).SetGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grades.Grades/SetGrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GradesServer).SetGrade(ctx, req.(*SetGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Grades_ServiceDesc is the grpc.ServiceDesc for Grades service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Grades_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grades.Grades",
	HandlerType: (*GradesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLessonGrades",
			Handler:    _Grades_GetLessonGrades_Handler,
		},
		{
			MethodName: "GetAllLessonsGradesByStudentID",
			Handler:    _Grades_GetAllLessonsGradesByStudentID_Handler,
		},
		{
			MethodName: "SetGrade",
			Handler:    _Grades_SetGrade_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grades.proto",
}
