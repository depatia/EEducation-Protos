// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: lesson.proto

package lesson

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LessonClient is the client API for Lesson service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LessonClient interface {
	SetLesson(ctx context.Context, in *SetLessonRequest, opts ...grpc.CallOption) (*SetLessonResponse, error)
	GetAllTeacherLessons(ctx context.Context, in *GetAllTeacherLessonsRequest, opts ...grpc.CallOption) (*GetAllTeacherLessonsResponse, error)
	IsLessonClassCombinationExists(ctx context.Context, in *IsLessonClassCombinationExistsRequest, opts ...grpc.CallOption) (*IsLessonClassCombinationExistsResponse, error)
	IsClassExists(ctx context.Context, in *IsClassExistsRequest, opts ...grpc.CallOption) (*IsClassExistsResponse, error)
}

type lessonClient struct {
	cc grpc.ClientConnInterface
}

func NewLessonClient(cc grpc.ClientConnInterface) LessonClient {
	return &lessonClient{cc}
}

func (c *lessonClient) SetLesson(ctx context.Context, in *SetLessonRequest, opts ...grpc.CallOption) (*SetLessonResponse, error) {
	out := new(SetLessonResponse)
	err := c.cc.Invoke(ctx, "/lesson.Lesson/SetLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonClient) GetAllTeacherLessons(ctx context.Context, in *GetAllTeacherLessonsRequest, opts ...grpc.CallOption) (*GetAllTeacherLessonsResponse, error) {
	out := new(GetAllTeacherLessonsResponse)
	err := c.cc.Invoke(ctx, "/lesson.Lesson/GetAllTeacherLessons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonClient) IsLessonClassCombinationExists(ctx context.Context, in *IsLessonClassCombinationExistsRequest, opts ...grpc.CallOption) (*IsLessonClassCombinationExistsResponse, error) {
	out := new(IsLessonClassCombinationExistsResponse)
	err := c.cc.Invoke(ctx, "/lesson.Lesson/IsLessonClassCombinationExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lessonClient) IsClassExists(ctx context.Context, in *IsClassExistsRequest, opts ...grpc.CallOption) (*IsClassExistsResponse, error) {
	out := new(IsClassExistsResponse)
	err := c.cc.Invoke(ctx, "/lesson.Lesson/IsClassExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LessonServer is the server API for Lesson service.
// All implementations must embed UnimplementedLessonServer
// for forward compatibility
type LessonServer interface {
	SetLesson(context.Context, *SetLessonRequest) (*SetLessonResponse, error)
	GetAllTeacherLessons(context.Context, *GetAllTeacherLessonsRequest) (*GetAllTeacherLessonsResponse, error)
	IsLessonClassCombinationExists(context.Context, *IsLessonClassCombinationExistsRequest) (*IsLessonClassCombinationExistsResponse, error)
	IsClassExists(context.Context, *IsClassExistsRequest) (*IsClassExistsResponse, error)
	mustEmbedUnimplementedLessonServer()
}

// UnimplementedLessonServer must be embedded to have forward compatible implementations.
type UnimplementedLessonServer struct {
}

func (UnimplementedLessonServer) SetLesson(context.Context, *SetLessonRequest) (*SetLessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLesson not implemented")
}
func (UnimplementedLessonServer) GetAllTeacherLessons(context.Context, *GetAllTeacherLessonsRequest) (*GetAllTeacherLessonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTeacherLessons not implemented")
}
func (UnimplementedLessonServer) IsLessonClassCombinationExists(context.Context, *IsLessonClassCombinationExistsRequest) (*IsLessonClassCombinationExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLessonClassCombinationExists not implemented")
}
func (UnimplementedLessonServer) IsClassExists(context.Context, *IsClassExistsRequest) (*IsClassExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsClassExists not implemented")
}
func (UnimplementedLessonServer) mustEmbedUnimplementedLessonServer() {}

// UnsafeLessonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LessonServer will
// result in compilation errors.
type UnsafeLessonServer interface {
	mustEmbedUnimplementedLessonServer()
}

func RegisterLessonServer(s grpc.ServiceRegistrar, srv LessonServer) {
	s.RegisterService(&Lesson_ServiceDesc, srv)
}

func _Lesson_SetLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServer).SetLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lesson.Lesson/SetLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServer).SetLesson(ctx, req.(*SetLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lesson_GetAllTeacherLessons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTeacherLessonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServer).GetAllTeacherLessons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lesson.Lesson/GetAllTeacherLessons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServer).GetAllTeacherLessons(ctx, req.(*GetAllTeacherLessonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lesson_IsLessonClassCombinationExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsLessonClassCombinationExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServer).IsLessonClassCombinationExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lesson.Lesson/IsLessonClassCombinationExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServer).IsLessonClassCombinationExists(ctx, req.(*IsLessonClassCombinationExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Lesson_IsClassExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsClassExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LessonServer).IsClassExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lesson.Lesson/IsClassExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LessonServer).IsClassExists(ctx, req.(*IsClassExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Lesson_ServiceDesc is the grpc.ServiceDesc for Lesson service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Lesson_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lesson.Lesson",
	HandlerType: (*LessonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLesson",
			Handler:    _Lesson_SetLesson_Handler,
		},
		{
			MethodName: "GetAllTeacherLessons",
			Handler:    _Lesson_GetAllTeacherLessons_Handler,
		},
		{
			MethodName: "IsLessonClassCombinationExists",
			Handler:    _Lesson_IsLessonClassCombinationExists_Handler,
		},
		{
			MethodName: "IsClassExists",
			Handler:    _Lesson_IsClassExists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lesson.proto",
}
